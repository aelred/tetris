apiVersion: apps/v1
kind: Deployment
metadata:
  name: tetris-server
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tetris-server
  template:
    metadata:
      labels:
        app: tetris-server
    spec:
      containers:
        - name: tetris-server
          image: docker.io/aelred/tetris-server
          env:
            - name: ROCKET_PORT
              value: "8000"
          ports:
            - containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: "/root/.tetris/"
              name: tetris-storage
          readinessProbe:
            httpGet:
              port: 8000
              path: /scores
      volumes:
        - name: tetris-storage
          persistentVolumeClaim:
            claimName: tetris-server
---
apiVersion: v1
kind: Service
metadata:
  name: tetris-server
  namespace: default
spec:
  selector:
    app: tetris-server
  ports:
    - protocol: TCP
      port: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tetris-server
  namespace: default
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/middleware: tetris-server-cors
spec:
  tls:
    - hosts:
        - api.tetris.ael.red
      secretName: tetris-server-tls
  rules:
    - host: api.tetris.ael.red
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: tetris-server
                port:
                  number: 8000
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: tetris-server-cors
  namespace: default
spec:
  headers:
    accessControlAllowOriginList:
      - "https://tetris.ael.red"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tetris-server
  namespace: default
spec:
  accessModes: [ReadWriteMany]
  resources:
    requests:
      storage: 2Ki
